/**
 * This file was automatically generated by the Mule Development Kit
 */
package com.kss.uClassify;

import java.util.HashMap;
import java.util.Map;

import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.ConnectionException;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Processor;
import org.onesun.textmining.uclassify.ResultHandler;
import org.onesun.textmining.uclassify.ServiceType;
import org.onesun.textmining.uclassify.UClassifyService;

/**
 * Cloud Connector
 *
 * @author MuleSoft, Inc.
 */
@Connector(name="uclassify", schemaVersion="1.0-SNAPSHOT")
public class uClassifyConnector
{
	
	static Map<String, Double> mainresults=new HashMap<String, Double>();
    /**
     * Configurable
     */
    @Configurable
    private String AccessKey;

    /**
     * Set property
     *
     * @param AccessKey My AccessKey
     */
    public void setAccessKey(String AccessKey)
    {
        this.AccessKey = AccessKey;
    }
    /**
     * Configurable
     */
    @Configurable
    private String text;

    /**
     * Set property
     *
     * @param Text classify Text
     */
    public void setText(String text)
    {
        this.text = text;
    }

    /**
     * Connect
     *
    
     * @param Key An AccessKey
     * @throws ConnectionException
     */
    @Connect
    public void connect(@ConnectionKey String Key)
        throws ConnectionException {
        /*
         * CODE FOR ESTABLISHING A CONNECTION GOES IN HERE
         */
    	UClassifyService.setUClassifyReadAccessKey(Key);
    
    }

    /**
     * Disconnect
     */
    @Disconnect
    public void disconnect() {
        /*
         * CODE FOR CLOSING A CONNECTION GOES IN HERE
         */
    }

    /**
     * Are we connected
     */
    @ValidateConnection
    public boolean isConnected() {
        return true;
    }

    /**
     * Are we connected
     */
    @ConnectionIdentifier
    public String connectionId() {
        return "001";
    }
    
    
    
    

    /**
     * Custom processor
     *
     * {@sample.xml ../../../doc/uClassify-connector.xml.sample uclassify:my-processor}
     *
     * @param servicename service name to be called
     * @return Some HashMap
     */
    @Processor
    public Map<String, Double> myProcessor(String servicename)
    {
    	ServiceType service=ServiceType.valueOf(servicename);
    	//static Map<String, Double> mainresults=new HashMap<String, Double>();
    	
    	UClassifyService uClassifyService = new UClassifyService(text, service, new ResultHandler() {
			
			@Override
			public void process(ServiceType serviceType, Map<String, Double> results) {
				System.out.println(
						"---------------------------------------------------------------------\n" 
						+
						serviceType.getUrl() + " <<<>>> " + serviceType.getClassifier() + "\n" +
						"---------------------------------------------------------------------\n"
					);
				
				for(String key : results.keySet()){
					Double result = results.get(key);
					System.out.println(key+result);
				}
				
				mainresults=results;	
				
			}
			
		});	
    	
    	return mainresults;
    }
}
